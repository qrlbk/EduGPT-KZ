#!/usr/bin/env python3
"""
EduGPT KZ - Demo Bot
–ê–≤—Ç–æ—Ä: Adilet Kuralbek
¬© 2025. All rights reserved.

–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏.
"""

import asyncio
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class User:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    language: str = "ru"
    is_student: bool = True

@dataclass
class Message:
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text: str
    user_id: int
    timestamp: datetime
    language: str = "ru"

class SimpleFAQ:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ FAQ –¥–ª—è –¥–µ–º–æ"""
    
    def __init__(self):
        self.faq_data = {
            "ru": {
                "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ e.edugpt.edu.kz –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'",
                "—ç–∫–∑–∞–º–µ–Ω": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",
                "—Å—Ç–∏–ø–µ–Ω–¥–∏—è": "–°—Ç–∏–ø–µ–Ω–¥–∏—è –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è 10 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞. –†–∞–∑–º–µ—Ä: 50,000 —Ç–µ–Ω–≥–µ",
                "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: +7 (727) 377-33-33, email: info@edugpt.edu.kz",
                "–∞–¥–º–∏–Ω": "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /faq_add –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
            },
            "kk": {
                "—Å–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ": "–°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ e.edugpt.edu.kz —Å–∞–π—Ç—ã–Ω–¥–∞“ì—ã –∂–µ–∫–µ –∫–∞–±–∏–Ω–µ—Ç—Ç–µ '–°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ' –±”©–ª—ñ–º—ñ–Ω–¥–µ",
                "–µ–º—Ç–∏—Ö–∞–Ω": "–ï–º—Ç–∏—Ö–∞–Ω –∫–µ—Å—Ç–µ—Å—ñ —Å–µ—Å—Å–∏—è –±–∞—Å—Ç–∞–ª–º–∞—Å –±“±—Ä—ã–Ω 2 –∞–ø—Ç–∞ –±“±—Ä—ã–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Å–∞–π—Ç—ã–Ω–¥–∞ –∂–∞—Ä–∏—è–ª–∞–Ω–∞–¥—ã",
                "—Å—Ç–∏–ø–µ–Ω–¥–∏—è": "–°—Ç–∏–ø–µ–Ω–¥–∏—è ”ô—Ä –∞–π–¥—ã“£ 10-—ã–Ω–¥–∞ —Ç”©–ª–µ–Ω–µ–¥—ñ. –ú”©–ª—à–µ—Ä—ñ: 50,000 —Ç–µ“£–≥–µ",
                "–±–∞–π–ª–∞–Ω—ã—Å": "“ö–∞–±—ã–ª–¥–∞—É –∫–æ–º–∏—Å—Å–∏—è—Å—ã: +7 (727) 377-33-33, email: info@edugpt.edu.kz"
            }
        }

    def search(self, query: str, language: str = "ru") -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ FAQ –±–∞–∑–µ"""
        query_lower = query.lower().strip()
        
        for key, answer in self.faq_data.get(language, {}).items():
            if key in query_lower:
                return answer
        
        return None

class DemoEduGPTBot:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç EduGPT KZ"""
    
    def __init__(self):
        self.users: Dict[int, User] = {}
        self.faq = SimpleFAQ()
        self.stats = {
            "total_messages": 0,
            "users_count": 0,
            "faq_hits": 0
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ EduGPT KZ Demo Bot –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üìß –ê–≤—Ç–æ—Ä: Adilet Kuralbek (kuralbekadilet475@gmail.com)")
        logger.info("‚öñÔ∏è ¬© 2025. All rights reserved.")
        print("\n" + "="*50)
        print("üéì EduGPT KZ - AI Assistant Demo")
        print("="*50)
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é!")
        print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        
        await self.run_demo()

    async def process_message(self, user_id: int, text: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["total_messages"] += 1
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.users:
            self.users[user_id] = User(id=user_id)
            self.stats["users_count"] += 1
        
        user = self.users[user_id]
        user.language = self.detect_language(text)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if text.lower().startswith('/'):
            return await self.handle_command(user, text)
        
        # –ü–æ–∏—Å–∫ –≤ FAQ
        faq_answer = self.faq.search(text, user.language)
        if faq_answer:
            self.stats["faq_hits"] += 1
            return faq_answer
        
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        return self.get_general_response(text, user.language)

    def detect_language(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        kazakh_indicators = ['“õ', '”ô', '”©', '“±', '“Ø', '—ñ', '“£', '“ì']
        if any(char in text.lower() for char in kazakh_indicators):
            return "kk"
        return "ru"

    async def handle_command(self, user: User, text: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        command = text.lower().strip()
        
        if command == '/start':
            return self.get_welcome_message(user.language)
        elif command == '/help':
            return self.get_help_message(user.language)
        elif command == '/stats':
            return self.get_stats_message()
        elif command == '/faq':
            return self.get_faq_topics(user.language)
        else:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."

    def get_welcome_message(self, language: str) -> str:
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if language == "kk":
            return """üéì –°”ô–ª–µ–º! –ú–µ–Ω EduGPT KZ –±–æ—Ç—ã–º—ã–Ω!

–ú–µ–Ω —Å—ñ–∑–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω:
‚Ä¢ –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ–Ω —Ç–∞–±—É
‚Ä¢ –ï–º—Ç–∏—Ö–∞–Ω —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç
‚Ä¢ –°—Ç–∏–ø–µ–Ω–¥–∏—è —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“õ—Ç–∞—Ä
‚Ä¢ –ë–∞–π–ª–∞–Ω—ã—Å –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ

–°“±—Ä–∞“õ “õ–æ–π—ã“£—ã–∑! ü§ñ"""
        else:
            return """üéì –ü—Ä–∏–≤–µ—Ç! –Ø EduGPT KZ –±–æ—Ç!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–∫–∑–∞–º–µ–Ω–∞—Ö  
‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã! ü§ñ"""

    def get_help_message(self, language: str) -> str:
        """–°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if language == "kk":
            return """üìö –ö”©–º–µ–∫:

üîç –°“±—Ä–∞“õ—Ç–∞—Ä –º—ã—Å–∞–ª–¥–∞—Ä—ã:
‚Ä¢ "–°–∞–±–∞“õ –∫–µ—Å—Ç–µ–º “õ–∞–π–¥–∞?"
‚Ä¢ "–ï–º—Ç–∏—Ö–∞–Ω “õ–∞—à–∞–Ω?"
‚Ä¢ "–°—Ç–∏–ø–µ–Ω–¥–∏—è “õ–∞–Ω—à–∞?"

üìã –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä:
/start - –±–∞—Å—Ç–∞—É
/help - –∫”©–º–µ–∫
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/faq - –∂–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä"""
        else:
            return """üìö –°–ø—Ä–∞–≤–∫–∞:

üîç –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ì–¥–µ –º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"
‚Ä¢ "–ö–æ–≥–¥–∞ —ç–∫–∑–∞–º–µ–Ω?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è?"

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å
/help - —Å–ø—Ä–∞–≤–∫–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/faq - —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""

    def get_stats_message(self) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        return f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ-–±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.stats['users_count']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {self.stats['total_messages']}
üéØ FAQ –ø–æ–ø–∞–¥–∞–Ω–∏–π: {self.stats['faq_hits']}

üìà –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {self.stats['faq_hits'] / max(self.stats['total_messages'], 1) * 100:.1f}%"""

    def get_faq_topics(self, language: str) -> str:
        """–°–ø–∏—Å–æ–∫ —Ç–µ–º FAQ"""
        if language == "kk":
            return """‚ùì –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä:

‚Ä¢ –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ
‚Ä¢ –ï–º—Ç–∏—Ö–∞–Ω
‚Ä¢ –°—Ç–∏–ø–µ–Ω–¥–∏—è
‚Ä¢ –ë–∞–π–ª–∞–Ω—ã—Å –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ

–°“±—Ä–∞“õ—Ç—ã“£ –±—ñ—Ä—ñ–Ω –∂–∞–∑—ã–ø –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!"""
        else:
            return """‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –≠–∫–∑–∞–º–µ–Ω—ã
‚Ä¢ –°—Ç–∏–ø–µ–Ω–¥–∏—è
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤!"""

    def get_general_response(self, text: str, language: str) -> str:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        if language == "kk":
            return """ü§î –ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω –±“±–ª —Å“±—Ä–∞“õ“õ–∞ –¥”ô–ª –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–º–∞–π–º—ã–Ω.

“ö–∞–π—Ç–∞–ª–∞–ø —Å“±—Ä–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ /faq –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.
–ö”©–º–µ–∫ –∫–µ—Ä–µ–∫ –±–æ–ª—Å–∞, “õ–∞–±—ã–ª–¥–∞—É –∫–æ–º–∏—Å—Å–∏—è—Å—ã–Ω–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑:
üìû +7 (727) 377-33-33"""
        else:
            return """ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.

–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /faq.
–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é:
üìû +7 (727) 377-33-33"""

    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        user_id = 1  # –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input("\nüë§ –í—ã: ").strip()
                
                if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ EduGPT KZ!")
                    break
                
                if not user_input:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = await self.process_message(user_id, user_input)
                
                # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                print(f"\nü§ñ EduGPT: {response}")
                
            except KeyboardInterrupt:
                print("\n\nüëã –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
                print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = DemoEduGPTBot()
    await bot.start()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
    print("‚öñÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("¬© 2025 Adilet Kuralbek. All rights reserved.")
    print("üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã: kuralbekadilet475@gmail.com")
    print("üö´ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏\n")
    
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –î–µ–º–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
