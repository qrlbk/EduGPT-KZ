#!/usr/bin/env python3
"""
EduGPT KZ - API Demo Examples
–ê–≤—Ç–æ—Ä: Adilet Kuralbek
¬© 2025. All rights reserved.

–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–ò–ú–ï–†–´ API
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API EduGPT KZ.
–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏.
"""

import requests
import json
import asyncio
import aiohttp
from typing import Dict, List, Optional
from datetime import datetime

class EduGPTAPIDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç API EduGPT KZ"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.headers = {
            "Content-Type": "application/json",
            "User-Agent": "EduGPT-Demo-Client/1.0"
        }
    
    def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
        try:
            response = requests.get(f"{self.base_url}/api/health", timeout=5)
            return {
                "status": "success",
                "data": response.json(),
                "status_code": response.status_code
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "status_code": 0
            }
    
    def send_message(self, message: str, user_id: int, language: str = "ru") -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É"""
        payload = {
            "message": message,
            "user_id": user_id,
            "language": language,
            "timestamp": datetime.now().isoformat()
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/api/chat/message",
                json=payload,
                headers=self.headers,
                timeout=10
            )
            
            return {
                "status": "success",
                "data": response.json(),
                "status_code": response.status_code
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "status_code": 0
            }
    
    def search_faq(self, query: str, language: str = "ru") -> Dict:
        """–ü–æ–∏—Å–∫ –≤ FAQ –±–∞–∑–µ"""
        params = {
            "query": query,
            "language": language,
            "limit": 5
        }
        
        try:
            response = requests.get(
                f"{self.base_url}/api/faq/search",
                params=params,
                headers=self.headers,
                timeout=5
            )
            
            return {
                "status": "success",
                "data": response.json(),
                "status_code": response.status_code
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "status_code": 0
            }
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            response = requests.get(
                f"{self.base_url}/api/analytics/stats",
                headers=self.headers,
                timeout=5
            )
            
            return {
                "status": "success",
                "data": response.json(),
                "status_code": response.status_code
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "status_code": 0
            }
    
    async def async_send_message(self, session: aiohttp.ClientSession, 
                               message: str, user_id: int, language: str = "ru") -> Dict:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        payload = {
            "message": message,
            "user_id": user_id,
            "language": language,
            "timestamp": datetime.now().isoformat()
        }
        
        try:
            async with session.post(
                f"{self.base_url}/api/chat/message",
                json=payload,
                headers=self.headers
            ) as response:
                data = await response.json()
                return {
                    "status": "success",
                    "data": data,
                    "status_code": response.status
                }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "status_code": 0
            }

def demo_sync_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API"""
    print("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API")
    print("=" * 40)
    
    api = EduGPTAPIDemo()
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API...")
    health = api.health_check()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {health}")
    
    # 2. –ü–æ–∏—Å–∫ –≤ FAQ
    print("\n2. –ü–æ–∏—Å–∫ –≤ FAQ...")
    faq_result = api.search_faq("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "ru")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {faq_result}")
    
    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    message_result = api.send_message("–ö–æ–≥–¥–∞ —ç–∫–∑–∞–º–µ–Ω –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?", 12345, "ru")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {message_result}")
    
    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    stats = api.get_stats()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {stats}")

async def demo_async_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API"""
    print("\n‚ö° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API")
    print("=" * 40)
    
    api = EduGPTAPIDemo()
    
    async with aiohttp.ClientSession() as session:
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        tasks = []
        
        messages = [
            ("–ö–æ–≥–¥–∞ —ç–∫–∑–∞–º–µ–Ω –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?", 12345),
            ("–ì–¥–µ –º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", 12346),
            ("–°–∫–æ–ª—å–∫–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è?", 12347),
            ("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏", 12348),
            ("–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å FAQ?", 12349)
        ]
        
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")
        
        for message, user_id in messages:
            task = api.async_send_message(session, message, user_id)
            tasks.append(task)
        
        # –ñ–¥–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for i, result in enumerate(results):
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {result}")

def demo_api_examples():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ API"""
    print("\nüìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")
    print("=" * 40)
    
    api = EduGPTAPIDemo()
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    examples = [
        {
            "name": "FAQ –ø–æ–∏—Å–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            "method": "GET",
            "endpoint": "/api/faq/search",
            "params": {"query": "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "language": "ru"},
            "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
        },
        {
            "name": "FAQ –ø–æ–∏—Å–∫ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º",
            "method": "GET", 
            "endpoint": "/api/faq/search",
            "params": {"query": "—Å–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ", "language": "kk"},
            "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º"
        },
        {
            "name": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É",
            "method": "POST",
            "endpoint": "/api/chat/message",
            "body": {
                "message": "–ö–æ–≥–¥–∞ —ç–∫–∑–∞–º–µ–Ω –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é?",
                "user_id": 12345,
                "language": "ru"
            },
            "description": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞"
        },
        {
            "name": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é",
            "method": "POST",
            "endpoint": "/api/chat/message", 
            "body": {
                "message": "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π FAQ?",
                "user_id": 54321,
                "language": "ru",
                "is_teacher": True
            },
            "description": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
        },
        {
            "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            "method": "GET",
            "endpoint": "/api/analytics/stats",
            "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
        }
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. {example['name']}")
        print(f"   –ú–µ—Ç–æ–¥: {example['method']}")
        print(f"   Endpoint: {example['endpoint']}")
        if 'params' in example:
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {example['params']}")
        if 'body' in example:
            print(f"   –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {example['body']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {example['description']}")

def demo_curl_examples():
    """–ü—Ä–∏–º–µ—Ä—ã curl –∫–æ–º–∞–Ω–¥"""
    print("\nüîß –ü—Ä–∏–º–µ—Ä—ã curl –∫–æ–º–∞–Ω–¥")
    print("=" * 40)
    
    curl_examples = [
        {
            "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API",
            "command": "curl -X GET http://localhost:8000/api/health"
        },
        {
            "name": "–ü–æ–∏—Å–∫ –≤ FAQ",
            "command": "curl -X GET 'http://localhost:8000/api/faq/search?query=—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ&language=ru'"
        },
        {
            "name": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "command": """curl -X POST http://localhost:8000/api/chat/message \\
  -H "Content-Type: application/json" \\
  -d '{"message": "–ö–æ–≥–¥–∞ —ç–∫–∑–∞–º–µ–Ω?", "user_id": 12345, "language": "ru"}'"""
        },
        {
            "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            "command": "curl -X GET http://localhost:8000/api/analytics/stats"
        }
    ]
    
    for i, example in enumerate(curl_examples, 1):
        print(f"\n{i}. {example['name']}")
        print(f"   {example['command']}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéì EduGPT KZ - API Demo Examples")
    print("–ê–≤—Ç–æ—Ä: Adilet Kuralbek")
    print("¬© 2025. All rights reserved.")
    print("üìß kuralbekadilet475@gmail.com")
    print("\n" + "="*50)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_sync_api()
    await demo_async_api()
    demo_api_examples()
    demo_curl_examples()
    
    print("\n" + "="*50)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏")

if __name__ == "__main__":
    print("‚öñÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø API")
    print("¬© 2025 Adilet Kuralbek. All rights reserved.")
    print("üö´ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏\n")
    
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
